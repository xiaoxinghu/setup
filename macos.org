#+SETUPFILE: .setup
#+TITLE: macOS
#+DESCRIPTION: Documentation of my special macOS tweaks.

#+BEGIN_PREVIEW
My daily driver is a MacBook Pro, this is the thing that I will run when I
switch to a new computer.
#+END_PREVIEW

#+TOC: headlines 3

* GUI environment
The =plist= file for setting up =PATH= for GUI applications.

#+BEGIN_SRC conf :tangle .dist/src/Library/LaunchAgents/x.env.plist :mkdirp yes :eval no
     <?xml version="1.0" encoding="UTF-8"?>
     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
     <plist version="1.0">
       <dict>
         <key>Label</key>
         <string>x.env</string>
         <key>ProgramArguments</key>
         <array>
           <string>sh</string>
           <string>-c</string>
           <string>
             launchctl setenv PATH $PATH:/usr/local/bin:/usr/local/sbin
           </string>

         </array>
         <key>RunAtLoad</key>
         <true/>
       </dict>
     </plist>
#+END_SRC

* setup homebrew                                                         :sh:

#+NAME: setup_homebrew
#+BEGIN_SRC sh :tangle no :results output
  if ![[ which -s brew ]]; then
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  brew update
  # brew tap Homebrew/bundle
#+END_SRC

* Brewfile
:PROPERTIES:
:header-args: :eval no
:END:

** Basic

These are the *must haves*, for any Mac machine that I have to be working on.
#+BEGIN_SRC conf :tangle .dist/Brewfile
  tap 'caskroom/cask'
  tap 'caskroom/fonts'
  tap 'railwaycat/emacsmacport'
  brew 'tree'
  brew 'git'
  brew 'git-flow-avh'
  brew 'hub'
  brew 'coreutils'
  brew 'fish'
  brew 'vim'
  brew 'emacs-plus'
  brew 'tmux'
  brew 'reattach-to-user-namespace'
  brew 'the_silver_searcher'
  brew 'aspell', args: ['with-lang-en']

  # casks
  cask 'google-chrome'
  cask '1password'
  cask 'istat-menus'
  cask 'bartender'
  cask 'slack'
  cask 'skype'
  cask 'font-hack-nerd-font'
  cask 'karabiner-elements'
  cask 'hammerspoon'
#+END_SRC

** Personal

This list is for my personal computer.
#+BEGIN_SRC conf
  cask 'dropbox'
  cask 'omnigraffle'
  cask 'omnifocus'
  cask 'plex-media-server'
#+END_SRC


* The Tweaks

** iterm2

Use zsh instead of bash. =command+,= -> =Profiles= -> =Command=. Set to =/usr/local/bin/zsh=.
Enable system-wide hotkey.
[[http://xor.lonnen.com/2013/01/04/emacs-on-osx.html][Enable =Meta= key for emacs]].

* spell checking                                                         :sh:

I choose not to tangle dictionary files because I want to use symbol links,
for easy save new words.
#+BEGIN_SRC sh :exports results :results output :tangle no :eval no
    for file in "$(pwd -P)"/dictionary/*; do
      target="${ZDOTDIR:-$HOME}/.$(basename $file)"
      if [[ -h "$target" || -a "$target" ]]; then
        rm "$target"
      fi
      ln -s "$file" "$target"
    done
#+END_SRC

* fix ssh
:PROPERTIES:
:header-args: :tangle .dist/src/.ssh/config :mkdirp yes
:END:

This is for fixing ssh keys in macOS Sierra. Following [[https://github.com/jirsbek/SSH-keys-in-macOS-Sierra-keychain][this]] article.
#+BEGIN_SRC conf :eval no
    Host *
      AddKeysToAgent yes
      UseKeychain yes
      IdentityFile ~/.ssh/id_rsa
#+END_SRC

* Terminal.app color theme

I am currently a fan of [[https://draculatheme.com/terminal/][dradula]] theme.

* Hammerspoon
:PROPERTIES:
:header-args: :mkdirp yes
:END:

#+BEGIN_SRC conf :tangle .dist/src/.hammerspoon/.link_folder
link the whole folder
#+END_SRC

** Hyper Key

#+BEGIN_SRC lua :tangle .dist/src/.hammerspoon/hyper.lua
-- A global variable for the Hyper Mode
hyper = hs.hotkey.modal.new({}, 'F17')
hs.window.animationDuration = 0 -- disable animations

-- Enter Hyper Mode when F18 (Hyper/Capslock) is pressed
function enterHyperMode()
  hyper.triggered = false
  hyper:enter()
end

-- Leave Hyper Mode when F18 (Hyper/Capslock) is pressed,
-- send ESCAPE if no other keys are pressed.
function exitHyperMode()
  hyper:exit()
  if not hyper.triggered then
    hs.eventtap.keyStroke({}, 'ESCAPE')
  end
end

-- Bind the Hyper key
f18 = hs.hotkey.bind({}, 'F18', enterHyperMode, exitHyperMode)
#+END_SRC
** Window Management
:PROPERTIES:
:header-args: :tangle .dist/src/.hammerspoon/window.lua :mkdirp yes
:END:

Toggle full screen mode with =hyper= + =Enter=.
#+BEGIN_SRC lua
hyper:bind({}, "return", function()
    local win = hs.window.frontmostWindow()
    win:setFullscreen(not win:isFullscreen())
    hyper.triggered = true
end)
#+END_SRC

Move current window to 1/3 on the left.
#+BEGIN_SRC lua
hyper:bind({}, "Left", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()

    f.x = max.x
    f.y = max.y
    f.w = max.w / 3
    f.h = max.h
    win:setFrame(f)
end)
#+END_SRC

Move current window to 1/3 on the right.
#+BEGIN_SRC lua
hyper:bind({}, "Right", function()
    local win = hs.window.focusedWindow()
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()

    f.x = max.x + (max.w / 3 * 2)
    f.y = max.y
    f.w = max.w / 3
    f.h = max.h
    win:setFrame(f)
end)
#+END_SRC
** Init
#+BEGIN_SRC lua :tangle .dist/src/.hammerspoon/init.lua
require "hyper"
require "window"

-----------------------------------------------
-- Reload config on write
-----------------------------------------------
function reload_config(files)
  hs.reload()
end

hyper:bind({}, "r", function()
  reload_config()
  hyper.triggered = true
end)

hs.pathwatcher.new(os.getenv("HOME") .. "/.hammerspoon/", reload_config):start()
hs.alert.show("Config loaded")
#+END_SRC
